// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum NearbyStrategy {
  p2pCluster,
  p2pStar,
  p2pPointToPoint,
}

enum Provider {
  gatt,
  nearby,
}

enum State {
  on,
  off,
  unknown,
}

class Config {
  Config({
    this.name,
    this.strategy,
    this.allowMultipleVerifiedDevice,
  });

  String? name;
  NearbyStrategy? strategy;
  bool? allowMultipleVerifiedDevice;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['strategy'] = strategy == null ? null : strategy!.index;
    pigeonMap['allowMultipleVerifiedDevice'] = allowMultipleVerifiedDevice;
    return pigeonMap;
  }

  static Config decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Config(
      name: pigeonMap['name'] as String?,
      strategy: pigeonMap['strategy'] != null
          ? NearbyStrategy.values[pigeonMap['strategy']! as int]
          : null,
      allowMultipleVerifiedDevice: pigeonMap['allowMultipleVerifiedDevice'] as bool?,
    );
  }
}

class DataMessage {
  DataMessage({
    this.deviceId,
    this.provider,
    this.endpoint,
    this.data,
  });

  String? deviceId;
  Provider? provider;
  String? endpoint;
  String? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['deviceId'] = deviceId;
    pigeonMap['provider'] = provider == null ? null : provider!.index;
    pigeonMap['endpoint'] = endpoint;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static DataMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataMessage(
      deviceId: pigeonMap['deviceId'] as String?,
      provider: pigeonMap['provider'] != null
          ? Provider.values[pigeonMap['provider']! as int]
          : null,
      endpoint: pigeonMap['endpoint'] as String?,
      data: pigeonMap['data'] as String?,
    );
  }
}

class ConnectedDevice {
  ConnectedDevice({
    this.deviceId,
    this.provider,
  });

  String? deviceId;
  Provider? provider;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['deviceId'] = deviceId;
    pigeonMap['provider'] = provider == null ? null : provider!.index;
    return pigeonMap;
  }

  static ConnectedDevice decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ConnectedDevice(
      deviceId: pigeonMap['deviceId'] as String?,
      provider: pigeonMap['provider'] != null
          ? Provider.values[pigeonMap['provider']! as int]
          : null,
    );
  }
}

class StateResponse {
  StateResponse({
    this.state,
  });

  State? state;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['state'] = state == null ? null : state!.index;
    return pigeonMap;
  }

  static StateResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return StateResponse(
      state: pigeonMap['state'] != null
          ? State.values[pigeonMap['state']! as int]
          : null,
    );
  }
}

class _ServerApiCodec extends StandardMessageCodec {
  const _ServerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Config) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Config.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ServerApi {
  /// Constructor for [ServerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ServerApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ServerApiCodec();

  Future<void> startServer(Config arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ServerApi.startServer', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> stopServer() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ServerApi.stopServer', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _ClientApiCodec extends StandardMessageCodec {
  const _ClientApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Config) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Config.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ClientApi {
  /// Constructor for [ClientApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ClientApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ClientApiCodec();

  Future<void> startClient(Config arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ClientApi.startClient', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _ConnectionApiCodec extends StandardMessageCodec {
  const _ConnectionApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectedDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ConnectedDevice.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ConnectionApi {
  /// Constructor for [ConnectionApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ConnectionApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ConnectionApiCodec();

  Future<ConnectedDevice> connect(String arg_endpointId, String arg_displayName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConnectionApi.connect', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_endpointId, arg_displayName]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ConnectedDevice?)!;
    }
  }

  Future<int> disconnect(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConnectionApi.disconnect', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }
}

class _ConnectionCallbackApiCodec extends StandardMessageCodec {
  const _ConnectionCallbackApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectedDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ConnectedDevice.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class ConnectionCallbackApi {
  static const MessageCodec<Object?> codec = _ConnectionCallbackApiCodec();

  bool onDeviceConnected(ConnectedDevice device);
  void onDeviceDisconnected(ConnectedDevice device);
  static void setup(ConnectionCallbackApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ConnectionCallbackApi.onDeviceConnected', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.ConnectionCallbackApi.onDeviceConnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectedDevice? arg_device = (args[0] as ConnectedDevice?);
          assert(arg_device != null, 'Argument for dev.flutter.pigeon.ConnectionCallbackApi.onDeviceConnected was null, expected non-null ConnectedDevice.');
          final bool output = api.onDeviceConnected(arg_device!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ConnectionCallbackApi.onDeviceDisconnected', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.ConnectionCallbackApi.onDeviceDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectedDevice? arg_device = (args[0] as ConnectedDevice?);
          assert(arg_device != null, 'Argument for dev.flutter.pigeon.ConnectionCallbackApi.onDeviceDisconnected was null, expected non-null ConnectedDevice.');
          api.onDeviceDisconnected(arg_device!);
          return;
        });
      }
    }
  }
}

class _DiscoveryApiCodec extends StandardMessageCodec {
  const _DiscoveryApiCodec();
}

class DiscoveryApi {
  /// Constructor for [DiscoveryApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  DiscoveryApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _DiscoveryApiCodec();

  Future<int> startDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DiscoveryApi.startDiscovery', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<int> stopDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DiscoveryApi.stopDiscovery', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }
}

class _AdvertiseApiCodec extends StandardMessageCodec {
  const _AdvertiseApiCodec();
}

class AdvertiseApi {
  /// Constructor for [AdvertiseApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AdvertiseApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AdvertiseApiCodec();

  Future<int> startAdvertise() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AdvertiseApi.startAdvertise', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<int> stopAdvertise() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AdvertiseApi.stopAdvertise', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }
}

class _CommunicationApiCodec extends StandardMessageCodec {
  const _CommunicationApiCodec();
}

class CommunicationApi {
  /// Constructor for [CommunicationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CommunicationApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _CommunicationApiCodec();

  Future<int> sendMessage(String arg_toDeviceId, String arg_endpoint, String arg_payload) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CommunicationApi.sendMessage', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_toDeviceId, arg_endpoint, arg_payload]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<int> sendMessageToVerifiedDevice(String arg_endpoint, String arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CommunicationApi.sendMessageToVerifiedDevice', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_endpoint, arg_data]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }
}

class _CommunicationCallbackApiCodec extends StandardMessageCodec {
  const _CommunicationCallbackApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DataMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return DataMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class CommunicationCallbackApi {
  static const MessageCodec<Object?> codec = _CommunicationCallbackApiCodec();

  void onMessageReceived(DataMessage msg);
  void onRawMessageReceived(String deviceId, String msg);
  static void setup(CommunicationCallbackApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CommunicationCallbackApi.onMessageReceived', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CommunicationCallbackApi.onMessageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DataMessage? arg_msg = (args[0] as DataMessage?);
          assert(arg_msg != null, 'Argument for dev.flutter.pigeon.CommunicationCallbackApi.onMessageReceived was null, expected non-null DataMessage.');
          api.onMessageReceived(arg_msg!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CommunicationCallbackApi.onRawMessageReceived', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CommunicationCallbackApi.onRawMessageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null, 'Argument for dev.flutter.pigeon.CommunicationCallbackApi.onRawMessageReceived was null, expected non-null String.');
          final String? arg_msg = (args[1] as String?);
          assert(arg_msg != null, 'Argument for dev.flutter.pigeon.CommunicationCallbackApi.onRawMessageReceived was null, expected non-null String.');
          api.onRawMessageReceived(arg_deviceId!, arg_msg!);
          return;
        });
      }
    }
  }
}

class _StateCallbackApiCodec extends StandardMessageCodec {
  const _StateCallbackApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StateResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return StateResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class StateCallbackApi {
  static const MessageCodec<Object?> codec = _StateCallbackApiCodec();

  void onBluetoothStateChanged(StateResponse state);
  void onWifiStateChanged(StateResponse state);
  static void setup(StateCallbackApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StateCallbackApi.onBluetoothStateChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.StateCallbackApi.onBluetoothStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final StateResponse? arg_state = (args[0] as StateResponse?);
          assert(arg_state != null, 'Argument for dev.flutter.pigeon.StateCallbackApi.onBluetoothStateChanged was null, expected non-null StateResponse.');
          api.onBluetoothStateChanged(arg_state!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StateCallbackApi.onWifiStateChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.StateCallbackApi.onWifiStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final StateResponse? arg_state = (args[0] as StateResponse?);
          assert(arg_state != null, 'Argument for dev.flutter.pigeon.StateCallbackApi.onWifiStateChanged was null, expected non-null StateResponse.');
          api.onWifiStateChanged(arg_state!);
          return;
        });
      }
    }
  }
}
