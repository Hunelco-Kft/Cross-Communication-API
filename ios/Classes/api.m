// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTServerConfig ()
+ (FLTServerConfig *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDataMessage ()
+ (FLTDataMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTConnectedDevice ()
+ (FLTConnectedDevice *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTStateResponse ()
+ (FLTStateResponse *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTServerConfig
+ (instancetype)makeWithName:(nullable NSString *)name
    strategy:(FLTNearbyStrategy)strategy
    allowMultipleVerifiedDevice:(nullable NSNumber *)allowMultipleVerifiedDevice {
  FLTServerConfig* pigeonResult = [[FLTServerConfig alloc] init];
  pigeonResult.name = name;
  pigeonResult.strategy = strategy;
  pigeonResult.allowMultipleVerifiedDevice = allowMultipleVerifiedDevice;
  return pigeonResult;
}
+ (FLTServerConfig *)fromMap:(NSDictionary *)dict {
  FLTServerConfig *pigeonResult = [[FLTServerConfig alloc] init];
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.strategy = [GetNullableObject(dict, @"strategy") integerValue];
  pigeonResult.allowMultipleVerifiedDevice = GetNullableObject(dict, @"allowMultipleVerifiedDevice");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", @(self.strategy), @"strategy", (self.allowMultipleVerifiedDevice ? self.allowMultipleVerifiedDevice : [NSNull null]), @"allowMultipleVerifiedDevice", nil];
}
@end

@implementation FLTDataMessage
+ (instancetype)makeWithDeviceId:(nullable NSString *)deviceId
    provider:(FLTProvider)provider
    endpoint:(nullable NSString *)endpoint
    data:(nullable NSString *)data {
  FLTDataMessage* pigeonResult = [[FLTDataMessage alloc] init];
  pigeonResult.deviceId = deviceId;
  pigeonResult.provider = provider;
  pigeonResult.endpoint = endpoint;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (FLTDataMessage *)fromMap:(NSDictionary *)dict {
  FLTDataMessage *pigeonResult = [[FLTDataMessage alloc] init];
  pigeonResult.deviceId = GetNullableObject(dict, @"deviceId");
  pigeonResult.provider = [GetNullableObject(dict, @"provider") integerValue];
  pigeonResult.endpoint = GetNullableObject(dict, @"endpoint");
  pigeonResult.data = GetNullableObject(dict, @"data");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.deviceId ? self.deviceId : [NSNull null]), @"deviceId", @(self.provider), @"provider", (self.endpoint ? self.endpoint : [NSNull null]), @"endpoint", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation FLTConnectedDevice
+ (instancetype)makeWithDeviceId:(nullable NSString *)deviceId
    provider:(FLTProvider)provider {
  FLTConnectedDevice* pigeonResult = [[FLTConnectedDevice alloc] init];
  pigeonResult.deviceId = deviceId;
  pigeonResult.provider = provider;
  return pigeonResult;
}
+ (FLTConnectedDevice *)fromMap:(NSDictionary *)dict {
  FLTConnectedDevice *pigeonResult = [[FLTConnectedDevice alloc] init];
  pigeonResult.deviceId = GetNullableObject(dict, @"deviceId");
  pigeonResult.provider = [GetNullableObject(dict, @"provider") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.deviceId ? self.deviceId : [NSNull null]), @"deviceId", @(self.provider), @"provider", nil];
}
@end

@implementation FLTStateResponse
+ (instancetype)makeWithState:(FLTState)state {
  FLTStateResponse* pigeonResult = [[FLTStateResponse alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (FLTStateResponse *)fromMap:(NSDictionary *)dict {
  FLTStateResponse *pigeonResult = [[FLTStateResponse alloc] init];
  pigeonResult.state = [GetNullableObject(dict, @"state") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.state), @"state", nil];
}
@end

@interface FLTServerApiCodecReader : FlutterStandardReader
@end
@implementation FLTServerApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTServerConfig fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTServerApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTServerApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTServerConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTServerApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTServerApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTServerApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTServerApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTServerApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTServerApiCodecReaderWriter *readerWriter = [[FLTServerApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTServerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTServerApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ServerApi.startServer"
        binaryMessenger:binaryMessenger
        codec:FLTServerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startServerConfig:error:)], @"FLTServerApi api (%@) doesn't respond to @selector(startServerConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTServerConfig *arg_config = args[0];
        FlutterError *error;
        [api startServerConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ServerApi.stopServer"
        binaryMessenger:binaryMessenger
        codec:FLTServerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopServerWithError:)], @"FLTServerApi api (%@) doesn't respond to @selector(stopServerWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopServerWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTClientApiCodecReader : FlutterStandardReader
@end
@implementation FLTClientApiCodecReader
@end

@interface FLTClientApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTClientApiCodecWriter
@end

@interface FLTClientApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTClientApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTClientApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTClientApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTClientApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTClientApiCodecReaderWriter *readerWriter = [[FLTClientApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTClientApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTClientApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ClientApi.startDiscovery"
        binaryMessenger:binaryMessenger
        codec:FLTClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startDiscoveryWithError:)], @"FLTClientApi api (%@) doesn't respond to @selector(startDiscoveryWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startDiscoveryWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ClientApi.stopDiscovery"
        binaryMessenger:binaryMessenger
        codec:FLTClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopDiscoveryWithError:)], @"FLTClientApi api (%@) doesn't respond to @selector(stopDiscoveryWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopDiscoveryWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTCommunicationApiCodecReader : FlutterStandardReader
@end
@implementation FLTCommunicationApiCodecReader
@end

@interface FLTCommunicationApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTCommunicationApiCodecWriter
@end

@interface FLTCommunicationApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTCommunicationApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTCommunicationApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTCommunicationApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTCommunicationApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTCommunicationApiCodecReaderWriter *readerWriter = [[FLTCommunicationApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTCommunicationApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTCommunicationApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CommunicationApi.startAdvertise"
        binaryMessenger:binaryMessenger
        codec:FLTCommunicationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startAdvertiseWithCompletion:)], @"FLTCommunicationApi api (%@) doesn't respond to @selector(startAdvertiseWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startAdvertiseWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CommunicationApi.stopAdvertise"
        binaryMessenger:binaryMessenger
        codec:FLTCommunicationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopAdvertiseWithCompletion:)], @"FLTCommunicationApi api (%@) doesn't respond to @selector(stopAdvertiseWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopAdvertiseWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CommunicationApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:FLTCommunicationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageToDeviceId:endpoint:payload:completion:)], @"FLTCommunicationApi api (%@) doesn't respond to @selector(sendMessageToDeviceId:endpoint:payload:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_toDeviceId = args[0];
        NSString *arg_endpoint = args[1];
        NSString *arg_payload = args[2];
        [api sendMessageToDeviceId:arg_toDeviceId endpoint:arg_endpoint payload:arg_payload completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CommunicationApi.sendMessageToVerifiedDevice"
        binaryMessenger:binaryMessenger
        codec:FLTCommunicationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageToVerifiedDeviceEndpoint:data:completion:)], @"FLTCommunicationApi api (%@) doesn't respond to @selector(sendMessageToVerifiedDeviceEndpoint:data:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_endpoint = args[0];
        NSString *arg_data = args[1];
        [api sendMessageToVerifiedDeviceEndpoint:arg_endpoint data:arg_data completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTCommunicationCallbackApiCodecReader : FlutterStandardReader
@end
@implementation FLTCommunicationCallbackApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTConnectedDevice fromMap:[self readValue]];
    
    case 129:     
      return [FLTDataMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTCommunicationCallbackApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTCommunicationCallbackApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTConnectedDevice class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTDataMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTCommunicationCallbackApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTCommunicationCallbackApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTCommunicationCallbackApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTCommunicationCallbackApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTCommunicationCallbackApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTCommunicationCallbackApiCodecReaderWriter *readerWriter = [[FLTCommunicationCallbackApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTCommunicationCallbackApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTCommunicationCallbackApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onDeviceConnectedDevice:(FLTConnectedDevice *)arg_device completion:(void(^)(NSNumber *_Nullable, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CommunicationCallbackApi.onDeviceConnected"
      binaryMessenger:self.binaryMessenger
      codec:FLTCommunicationCallbackApiGetCodec()];
  [channel sendMessage:@[arg_device] reply:^(id reply) {
    NSNumber *output = reply;
    completion(output, nil);
  }];
}
- (void)onDeviceDisconnectedDevice:(FLTConnectedDevice *)arg_device completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CommunicationCallbackApi.onDeviceDisconnected"
      binaryMessenger:self.binaryMessenger
      codec:FLTCommunicationCallbackApiGetCodec()];
  [channel sendMessage:@[arg_device] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onMessageReceivedMsg:(FLTDataMessage *)arg_msg completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CommunicationCallbackApi.onMessageReceived"
      binaryMessenger:self.binaryMessenger
      codec:FLTCommunicationCallbackApiGetCodec()];
  [channel sendMessage:@[arg_msg] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onRawMessageReceivedDeviceId:(NSString *)arg_deviceId msg:(NSString *)arg_msg completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CommunicationCallbackApi.onRawMessageReceived"
      binaryMessenger:self.binaryMessenger
      codec:FLTCommunicationCallbackApiGetCodec()];
  [channel sendMessage:@[arg_deviceId, arg_msg] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface FLTStateCallbackApiCodecReader : FlutterStandardReader
@end
@implementation FLTStateCallbackApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTStateResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTStateCallbackApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTStateCallbackApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTStateResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTStateCallbackApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTStateCallbackApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTStateCallbackApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTStateCallbackApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTStateCallbackApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTStateCallbackApiCodecReaderWriter *readerWriter = [[FLTStateCallbackApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTStateCallbackApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTStateCallbackApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onBluetoothStateChangedState:(FLTStateResponse *)arg_state completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.StateCallbackApi.onBluetoothStateChanged"
      binaryMessenger:self.binaryMessenger
      codec:FLTStateCallbackApiGetCodec()];
  [channel sendMessage:@[arg_state] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onWifiStateChangedState:(FLTStateResponse *)arg_state completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.StateCallbackApi.onWifiStateChanged"
      binaryMessenger:self.binaryMessenger
      codec:FLTStateCallbackApiGetCodec()];
  [channel sendMessage:@[arg_state] reply:^(id reply) {
    completion(nil);
  }];
}
@end
